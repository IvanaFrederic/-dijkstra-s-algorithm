import heapq
import sys

class Graph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, name, edges):
        self.vertices[name] = edges

    def dijkstra(self, start):
        distances = {vertex: sys.maxsize for vertex in self.vertices}
        distances[start] = 0
        previous = {vertex: None for vertex in self.vertices}
        nodes = [(0, start)]

        while nodes:
            current_distance, current_vertex = heapq.heappop(nodes)

            if current_distance > distances[current_vertex]:
                continue

            for neighbor, weight in self.vertices[current_vertex].items():
                distance = current_distance + weight

                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    previous[neighbor] = current_vertex
                    heapq.heappush(nodes, (distance, neighbor))

        return distances, previous

    def shortest_path(self, start, finish):
        distances, previous = self.dijkstra(start)

        path = []
        current_vertex = finish
        while current_vertex is not None:
            path.insert(0, current_vertex)
            current_vertex = previous[current_vertex]

        return path

    def print_distances(self, start):
        distances, _ = self.dijkstra(start)
        print("Distances from the start vertex:")
        for vertex, distance in distances.items():
            print(f"To {vertex}: {distance}")

# Example usage:
g = Graph()
g.add_vertex('A', {'B': 7, 'C': 8})
g.add_vertex('B', {'A': 7, 'F': 2})
g.add_vertex('C', {'A': 8, 'F': 6, 'G': 4})
g.add_vertex('D', {'F': 8})
g.add_vertex('E', {'H': 1})
g.add_vertex('F', {'B': 2, 'C': 6, 'D': 8, 'G': 9, 'H': 3})
g.add_vertex('G', {'C': 4, 'F': 9})
g.add_vertex('H', {'E': 1, 'F': 3})

start_vertex = 'A'
g.print_distances(start_vertex)
