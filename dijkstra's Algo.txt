import heapq

infinity = float("inf")

def create_graph():
    # Create a sample graph
    return {
        'X': [(2, 'Y'), (3, 'Z')],
        'Y': [(1, 'Z'), (4, 'W'), (2, 'X')],
        'Z': [(3, 'X'), (1, 'Y'), (5, 'W')],
        'W': [(1, 'Y'), (5, 'Z')],
    }

def dijkstras_algorithm_heap(graph, start='X'):
    shortest_paths = {}
    visited = {}
    heap = []

    for node in list(graph.keys()):
        shortest_paths[node] = infinity
        visited[node] = False

    shortest_paths[start] = 0 
    visited[start] = True

    heapq.heappush(heap, (0, start))

    while heap:
        distance, node = heapq.heappop(heap)
        visited[node] = True

        for edge in graph[node]:
            cost, to_node = edge

            if (not visited[to_node]) and (distance + cost < shortest_paths[to_node]):
                shortest_paths[to_node] = distance + cost
                heapq.heappush(heap, (shortest_paths[to_node], to_node))

    return shortest_paths

def dijkstras_algorithm(graph, start='X'):
    shortest_paths = {}
    unvisited = list(graph.keys())

    for node in unvisited:
        shortest_paths[node] = infinity

    shortest_paths[start] = 0

    while unvisited:
        min_node = None

        for node in unvisited:
            if min_node is None:
                min_node = node
            elif shortest_paths[node] < shortest_paths[min_node]:
                min_node = node

        for edge in graph[min_node]:
            cost, to_node = edge

            if cost + shortest_paths[min_node] < shortest_paths[to_node]:
                shortest_paths[to_node] = cost + shortest_paths[min_node]

        unvisited.remove(min_node)

    return shortest_paths

def execute_dijkstras():
    graph = create_graph()
    starting_point = 'X'

    shortest_paths = dijkstras_algorithm(graph, starting_point)
    shortest_paths_using_heap = dijkstras_algorithm_heap(graph, starting_point)

    print(f'Shortest paths from {starting_point} (without heap): {shortest_paths}')
    print(f'Shortest paths from {starting_point} using heap: {shortest_paths_using_heap}')

if __name__ == '__main__':
    execute_dijkstras()
